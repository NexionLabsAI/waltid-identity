name: Release on manual push

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version'
        required: true

jobs:
  release:
    name: "Release"
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ inputs.release_version }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          docker-images: false
      - uses: actions/checkout@v3
      - name: Set version
        run: |
          sed -i "s/1.0.0-SNAPSHOT/${{ inputs.release_version }}/g" build.gradle.kts
      - run: |
          git tag v${{ inputs.release_version }}
          git push --tags
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v3
      - name: Running gradle build
        uses: eskatos/gradle-command-action@v3
        with:
          arguments: build --no-daemon

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::YOUR_AWS_ACCOUNT_ID:role/github-actions-ecs-role
          aws-region: YOUR_AWS_REGION

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push images to Amazon ECR
        id: build-images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ inputs.release_version }}  # Using your release version input
        run: |
          # Define repositories and their Dockerfile locations
          declare -A REPOSITORIES=(
            ["waltid-issuer-api"]="waltid-services/waltid-issuer-api/Dockerfile"
            ["waltid-wallet-api"]="waltid-services/waltid-wallet-api/Dockerfile"
            ["waltid-verifier-api"]="waltid-services/waltid-verifier-api/Dockerfile"
            ["waltid-demo-wallet"]="waltid-services/waltid-demo-wallet/Dockerfile"
            ["waltid-web-portal"]="waltid-services/waltid-web-portal/Dockerfile"
          )

          # Build and push each image with both latest and version tags
          for repo in "${!REPOSITORIES[@]}"; do
            echo "Building and pushing $repo..."
            # Build with specific Dockerfile path
            docker build -t $ECR_REGISTRY/$repo:$IMAGE_TAG  -f ${REPOSITORIES[$repo]} .
            # Push both tags
            docker push $ECR_REGISTRY/$repo:$IMAGE_TAG
            echo "::set-output name=image_$repo::$ECR_REGISTRY/$repo:$IMAGE_TAG"
          done

