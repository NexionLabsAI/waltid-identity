name: Release Build

on:
  release:
    types: [created]

permissions:
   id-token: write # Required for OIDC
   contents: read # Required for actions/checkout

jobs:
  release:
    name: "Release"
    runs-on: ubuntu-latest
    environment: production
    env:
      IMAGE_TAG: ${{ github.event.release.tag_name }}  # Changed to use release tag
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-ecs-role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push images to Amazon ECR
        id: build-images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ inputs.release_version }}  # Using your release version input
        run: |
          # Define repositories and their Dockerfile locations
          declare -A REPOSITORIES=(
            ["waltid-issuer-api"]="waltid-services/waltid-issuer-api/Dockerfile"
            ["waltid-wallet-api"]="waltid-services/waltid-wallet-api/Dockerfile"
            ["waltid-verifier-api"]="waltid-services/waltid-verifier-api/Dockerfile"
            ["waltid-demo-wallet"]="waltid-applications/waltid-web-wallet/apps/waltid-demo-wallet/Dockerfile"
            ["waltid-web-portal"]="waltid-applications/waltid-web-portal/Dockerfile"
          )

          # Build and push each image with both latest and version tags
          for repo in "${!REPOSITORIES[@]}"; do
            echo "Building and pushing $repo..."
            # Build with specific Dockerfile path
            docker build -t $ECR_REGISTRY/$repo:$IMAGE_TAG  -f ${REPOSITORIES[$repo]} .
            # Push both tags
            docker push $ECR_REGISTRY/$repo:$IMAGE_TAG
            echo "::set-output name=image_$repo::$ECR_REGISTRY/$repo:$IMAGE_TAG"
          done
